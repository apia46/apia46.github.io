let parsedJson;

let data = {items:{}, recipes:[], machines: {}};
let nodeIdIter = 0;
let itemIdIter = 0;

let previousMouseX;
let previousMouseY;

let nodes = {};

let draggingConnection = false;
let dragConnectionElement;
let draggingLine;
let updateLineFunction;

let previousRecipeSearchQuery = "";
let searchResults = [];
let searchScroll = 0;
let previousScrollDeltaY;
let previousRowsScrolled = 0;
let previousElementsWide;
let previousSearchMode;

let animFrame = 0;

let mouseX = 0;
let mouseY = 0;

function drag(element, accountForScaling) {
    var multiplier = (accountForScaling ? 1/Number(wrapper.style.getPropertyValue("--scale")||1) : 1);
    element.style.setProperty("--posX", Number(element.style.getPropertyValue("--posX")||0) + (mouseX - previousMouseX) * multiplier)
    element.style.setProperty("--posY", Number(element.style.getPropertyValue("--posY")||0) + (mouseY - previousMouseY) * multiplier)
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    if (element.nodeName == "NODE") allItemsInNode(element).forEach(item=>{if (item.connection) updateLine(item.connection)});
}

function loadDataset(dataset) {
    infoText.textContent = "Loading dataset";
    fetch(`assets/${dataset}/data.json`).then(response=>response.json())
        .then(parsed=>{
            parsedJson = parsed;
            switch (parsed.metadata.dataStructure) {
                case "normal":
                    Object.assign(data.items, parsed.items);
                    data.recipes.push(...parsed.recipes);
                    Object.assign(data.machines, parsed.machines);
                break;
                case "recexM": // extra-minified

                    function addItem(item, unit) {
                        var itemId = (item.i||item.N).replace("GT$", "gregtech:") + (item.m||item.m===0?"#"+item.m:"");
                        if (!data.items[itemId]) {
                            var itemData = { name: item.N||itemId }
                            if (unit) itemData.unit = unit;
                            switch (parsed.metadata.imageAutogenerateData) { // for now. later the cfg will be worked into it but i dont wanna do js text parsing right now
                                case "gtnh": gtnhGetImageData(itemId, itemData); break;
                            }
                            data.items[itemId] = itemData;
                            /*if (itemData.image) {
                                const img = new Image();
                                img.onload = ()=>{if (img.naturalHeight > 16) animatedImages.push(itemData.image)};
                                img.src = itemData.image;
                            }*/
                        }
                        return [itemId, item.a];
                    }

                    parsed.sources.find(source=>source.type=="gregtech")?.machines.forEach(machine=>{
                        data.machines[machine.n] = {
                            name: machine.n,
                            image: `assets/${dataset}/images/machines/${machine.n}.png`,
                            speed: 1
                        }
                        machine.r.forEach(recipe=>{
                            if (!recipe.E) return;
                            data.recipes.push({
                                time: recipe.t/20,
                                machines: [machine.n],
                                inputs: [...recipe["1"].map(item=>addItem(item)), ...recipe["3"].map(item=>addItem(item, "L"))],
                                outputs: [...recipe["2"].map(item=>addItem(item)), ...recipe["4"].map(item=>addItem(item, "L"))]
                            });
                        });
                    });
                break;
            }
            console.log("loaded!");
            infoText.textContent = "";
        }
    );
}

function load() {
    document.addEventListener("mousemove", event=>{
        mouseX = event.clientX;
        mouseY = event.clientY;
    });

    var dragGraph = ()=>{drag(wrapper)};
    wrapper.addEventListener("mousedown", ()=>{previousMouseX = mouseX; previousMouseY = mouseY; wrapper.addEventListener("mousemove", dragGraph)});
    wrapper.addEventListener("mouseup", ()=>{wrapper.removeEventListener("mousemove", dragGraph)});
    wrapper.addEventListener("mouseleave", ()=>{wrapper.removeEventListener("mousemove", dragGraph)});
    wrapper.addEventListener("wheel", event=>{
        var scaleFactor = 2**(-event.deltaY*0.003);
        wrapper.style.setProperty("--scale", Number(wrapper.style.getPropertyValue("--scale")||1) * scaleFactor);
        var posX = Number(wrapper.style.getPropertyValue("--posX")||0);
        var posY = Number(wrapper.style.getPropertyValue("--posY")||0);
        wrapper.style.setProperty("--posX", posX + (1 - scaleFactor) * (mouseX - posX));
        wrapper.style.setProperty("--posY", posY + (1 - scaleFactor) * (mouseY - posY));
    });

    ["mouseleave", "mouseup"].forEach(action=>wrapper.addEventListener(action, ()=>{
        if (draggingConnection) {
            wrapper.removeEventListener("mousemove", updateLineFunction);
            draggingConnection = false;
            dragConnectionElement.classList.remove("connecting");
            var connectedToElement = document.elementFromPoint(mouseX, mouseY);
            if (connectedToElement.nodeName == "ITEM" && connectedToElement != dragConnectionElement && canConnect(
                    fromInstance = itemGetInstance(dragConnectionElement), 
                    toInstance = itemGetInstance(connectedToElement)
            )) {
                updateLine(draggingLine, getGraphPositionFromCenter(dragConnectionElement), getGraphPositionFromCenter(connectedToElement));
                var isFromInput = fromInstance.type == "inputs" || toInstance.type == "outputs";
                if (fromInstance.type == "node") fromInstance.effectiveType = isFromInput?"inputs":"outputs";
                if (toInstance.type == "node") toInstance.effectiveType = isFromInput?"outputs":"inputs";
                var connection = {
                    inputs: isFromInput?fromInstance:toInstance,
                    outputs: isFromInput?toInstance:fromInstance,
                    line: draggingLine
                }
                fromInstance.connection = connection;
                toInstance.connection = connection;
                draggingLine.addEventListener("click", ()=>{removeConnection(connection)})
            } else {
                draggingLine.remove();
            }
        }
    }));

    setInterval(()=>{
        var element = document.elementFromPoint(mouseX, mouseY);
        if (!element) return;
        var name = element.getAttribute("name");
        hover.textContent = name;
        hover.style.setProperty("--posX", mouseX);
        hover.style.setProperty("--posY", mouseY);
        if (name) hover.classList.add("show");
        else hover.classList.remove("show");
    }, 0);

    searchOverlay.addEventListener("wheel", event=>{
        searchScroll += event.deltaY * 0.5;
        previousScrollDeltaY = event.deltaY * 0.5;
        if (previousRowsScrolled == 0 && searchScroll < 0) searchScroll = 0;
        switch (document.body.getAttribute("state")) {
            case "itemSearch": displaySearchedItems(); return;
            case "recipeSearch": displaySearchedRecipes(); return;
        }
    });
}

function newNode(generatorFunction, posX, posY, params) {
    var nodeElement = document.createElement("node");
    nodeElement.id = nodeIdIter;
    nodeElement.style.setProperty("--posX", posX);
    nodeElement.style.setProperty("--posY", posY);
    
    var dragNode = ()=>{drag(nodeElement, true)};
    nodeElement.addEventListener("mousedown", event=>{event.stopPropagation(); previousMouseX = mouseX; previousMouseY = mouseY; wrapper.addEventListener("mousemove", dragNode)});
    wrapper.addEventListener("mouseup", ()=>{wrapper.removeEventListener("mousemove", dragNode)});
    wrapper.addEventListener("mouseleave", ()=>{wrapper.removeEventListener("mousemove", dragNode)});
    
    nodeElement.innerHTML += `<div class="delete" onclick="removeNode(${nodeIdIter})">X</div>`;
    
    var nodeInstance = generatorFunction(nodeElement, params);
    nodeElement.classList.add(nodeInstance.type);
    graph.appendChild(nodeElement);
    nodes[nodeInstance.id] = nodeInstance;
    nodeDisplayBaseCase(nodeInstance);
    return [nodeInstance, dragNode];
}

function removeNode(id) {
    document.getElementById(id).remove();
    delete nodes[id];
}

// node generators
function recipeNode(node, recipe, functionless) {
    var recipeData = data.recipes[recipe];
    var nodeInstance = {
        id: nodeIdIter++,
        type: "recipeNode",
        element: node,
        recipe: recipe,
        machine: { // properties of machine running the recipe
            machine: recipeData.machines[0], // type of machine
        }
    }
    var machineData = data.machines[nodeInstance.machine.machine];
    node.innerHTML += `
        <div class="machine" style="--image:url('${machineData.image}');"></div>
        <div class="inputs"></div>
        <div class="recipe-arrow"></div>
        <div class="outputs"></div>
    `;
    var inputs = recipeData.inputs.map((input, index) => {
        var item = new Item(input[0], "inputs", itemIdIter++, node, index, functionless);
        item.baseQuantity = input[1];
        node.querySelector(".inputs").appendChild(item.element);
        return item;
    });
    var outputs = recipeData.outputs.map((output, index) => {
        var item = new Item(output[0], "outputs", itemIdIter++, node, index, functionless);
        item.baseQuantity = output[1];
        node.querySelector(".outputs").appendChild(item.element);
        return item;
    });
    nodeInstance.inputs = inputs;
    nodeInstance.outputs = outputs;
    return nodeInstance;
}

function itemNode(node, item) {
    node.innerHTML += `
        <div class="number-container"><input type="numeric" placeholder="quantity"></input><span>${data.items[item].unit||""}</span></div>
        <button>SET</button>
    `
    var nodeInstance = {
        id: nodeIdIter++,
        type: "itemNode",
        element: node,
    }
    var itemNode = new Item(item, "node", itemIdIter++, node);
    nodeInstance.item = itemNode;
    var itemElement = itemNode.element;
    itemNode.node = node;
    node.querySelector("button").addEventListener("click", ()=>{propagate(nodeInstance.item, Number(node.querySelector("input").value));});
    node.insertBefore(itemElement, node.firstChild);
    return nodeInstance;
}
// end node generators

function startConnection(element) {
    element.classList.add("connecting");
    draggingConnection = true;
    dragConnectionElement = element;
    draggingLine = document.createElement("line");
    graph.appendChild(draggingLine);

    var scale = Number(wrapper.style.getPropertyValue("--scale")||1);
    updateLineFunction = event=>{updateLine(draggingLine,
        getGraphPositionFromCenter(dragConnectionElement),
        [
            (mouseX - wrapper.offsetLeft - Number(wrapper.style.getPropertyValue("--posX")||0)) / scale,
            (mouseY - wrapper.offsetTop - Number(wrapper.style.getPropertyValue("--posY")||0)) / scale
        ]);
    }
    wrapper.addEventListener("mousemove", updateLineFunction);
    var dragStart = getGraphPositionFromCenter(dragConnectionElement);
    updateLineFunction({clientX:dragStart.x, clientY:dragStart.y});
}

// https://www.quirksmode.org/js/findpos.html
function getGraphPositionFromCenter(element) {
    var posX = element.offsetWidth / 2;
    var posY = element.offsetHeight / 2;
    do {
        posX += element.offsetLeft;
        posY += element.offsetTop;
    } while ((element = element.offsetParent) != graph);
    return [posX, posY];
}

function updateLine(lineOrConnection, from, to) {
    if (!lineOrConnection.nodeName) {
        from = getGraphPositionFromCenter(lineOrConnection.inputs.element);
        to = getGraphPositionFromCenter(lineOrConnection.outputs.element);
        lineOrConnection = lineOrConnection.line;
    }
    var aPos = from;
    var bPos = to;
    lineOrConnection.style.setProperty("--aX", aPos[0]);
    lineOrConnection.style.setProperty("--aY", aPos[1]);
    lineOrConnection.style.setProperty("--bX", bPos[0]);
    lineOrConnection.style.setProperty("--bY", bPos[1]);
}

function canConnect(fromInstance, toInstance) {
    if (fromInstance.contentId != toInstance.contentId) return false
    if (fromInstance.type == "inputs" && toInstance.type == "inputs") return false
    if (fromInstance.type == "outputs" && toInstance.type == "outputs") return false
    if (fromInstance.connection || toInstance.connection) return false
    return true
}

function itemGetInstance(element) {
    var nodeElement = element;
    while ((nodeElement = nodeElement.offsetParent).nodeName != "NODE");
    switch (nodes[nodeElement.id].type) {
        case "recipeNode": return nodes[nodeElement.id][element.getAttribute("type")][element.getAttribute("index")];
        case "itemNode": return nodes[nodeElement.id].item;
    }
}

function allItemsInNode(elementOrNode) {
    var node = elementOrNode.nodeName ? nodes[elementOrNode.id] : elementOrNode;
    switch (node.type) {
        case "recipeNode": return [...node.inputs, ...node.outputs];
        case "itemNode": return [node.item];
    }
}

function removeConnection(connection) {
    connection.line.remove();
    delete connection.inputs.connection;
    delete connection.outputs.connection;
}

function propagate(itemInstance, value, previous) {
    if (!value && value !== 0) {
        console.log("error in propagation", itemInstance);
        return;
    }
    itemInstance.quantity = value;
    var node = itemInstance.node;
    switch (node.type) {
        case "recipeNode":
            node.multiplier = itemInstance.quantity / itemInstance.baseQuantity;
            node.machine.amount = data.recipes[node.recipe].time * node.multiplier / data.machines[node.machine.machine].speed;
            allItemsInNode(node).forEach(item=>{
                if (item != itemInstance) {
                    item.quantity = item.baseQuantity * node.multiplier;
                    var connection = item.connection;
                    if (connection) {
                        propagate(connection[oppositeType(item.type)], item.quantity, item);
                    }
                }
            })
        break;
        case "itemNode":
            var connection = itemInstance.connection;
            if (connection && connection[oppositeType(itemInstance.effectiveType)] != previous) {
                propagate(connection[oppositeType(itemInstance.effectiveType)], value, itemInstance);
            }
            node.element.querySelector("input").value = itemInstance.quantity;
        break;
    }
    nodeDisplayMultipliedCase(node);
}

function oppositeType(type) { return type == "outputs" ? "inputs" : "outputs" }

function nodeDisplayBaseCase(node) {
    switch (node.type) {
        case "recipeNode":
            node.element.querySelector(".machine").setAttribute("amount", `${data.recipes[node.recipe].time}s`);
            allItemsInNode(node).forEach(item=>{
                item.element.setAttribute("quantity", `${item.baseQuantity}${data.items[item.contentId].unit||""}`);
            });
        break;
        case "itemNode": break;
    }
}

function nodeDisplayMultipliedCase(node) {
    switch (node.type) {
        case "recipeNode":
            node.element.querySelector(".machine").setAttribute("amount", "x" + node.machine.amount.toFixed(2));
            allItemsInNode(node).forEach(item=>{
                if (item.quantity || item.quantity === 0) item.element.setAttribute("quantity", `${item.quantity.toFixed(2)}${data.items[item.contentId].unit||""}`);
                else item.element.setAttribute("quantity", "");
            });
        break;
        case "itemNode": break;
    }
}

function testAllItems() {
    var index = 0;
    Object.keys(data.items).forEach(item=>{
        if (data.items[item].image) {
            newNode(itemNode, (index % 100) * 200, (index / 100) * 240, item);
            index += 1;
        }
    });
}

function searchItems() {
    searchScroll = 0;
    var query = itemSearchBar.value.toLowerCase();
    searchResults = Object.keys(data.items).filter(item=>data.items[item].name.toLowerCase().includes(query));
    if (searchResults.length < 4000) searchResults.sort((a,b)=>{
        return searchScore(data.items[b].name.toLowerCase(), query) - searchScore(data.items[a].name.toLowerCase(), query);
    });
    previousRecipeSearchQuery = "";
    previousSearchMode = "items";
    displaySearchedItems(true);
}

function searchRecipes() {
    searchScroll = 0;
    previousRowsScrolled = 0;
    var queries = recipeSearchBar.value.toLowerCase().split(",").map(query=>query.trim());

    var inputQueries = []
    var outputQueries = []
    var eitherQueries = []
    for (let query of queries) {
        if (query.slice(0,2) == "i:") inputQueries.push(query.slice(2));
        else if (query.slice(0,2) == "o:") outputQueries.push(query.slice(2));
        else eitherQueries.push(query);
    }
    var toSearchFrom;
    if (previousSearchMode == "recipes" && recipeSearchBar.value.includes(previousRecipeSearchQuery)) toSearchFrom = searchResults;
    else toSearchFrom = Object.keys(data.recipes);
    searchResults = toSearchFrom.filter(recipe=>{
        var recipeData = data.recipes[recipe];
        var inputs = recipeData.inputs.map(input=>data.items[input[0]].name.toLowerCase());
        var outputs = recipeData.outputs.map(output=>data.items[output[0]].name.toLowerCase());
        var eithers = [...inputs, ...outputs];
        return eitherQueries.every(thisQuery=>eithers.some(name=>name.includes(thisQuery)))
            && inputQueries.every(thisQuery=>inputs.some(name=>name.includes(thisQuery)))
            && outputQueries.every(thisQuery=>outputs.some(name=>name.includes(thisQuery)));
    });
    // sort recipes
    previousRecipeSearchQuery = recipeSearchBar.value;
    previousSearchMode = "recipes";
    displaySearchedRecipes(true);
}

function searchScore(target, query) {
    var score = 0;
    var index = target.indexOf(query);
    score -= index;
    score -= [0, ...target.split("")].reduce((total, thisLetter, index)=>{
        return total + "abcdefghijklmnopqrstuvwxyz".indexOf(thisLetter) * 26**-index;
    })
    return score;
}

function displaySearchedItems(searchUpdated) {
    var scale = Number(wrapper.style.getPropertyValue("--scale")||1);
    searchOverlay.style.setProperty("--scale", scale);
    var elementsWide = Math.floor((searchOverlay.offsetWidth - 16) / (160*scale+16));
    var elementsTall = Math.ceil((searchOverlay.offsetHeight - 16) / (160*scale+16));
    var rowsScrolled = Math.floor(searchScroll / scale / 176);
    searchOverlay.style.setProperty("--scroll-offset", searchScroll % (176 * scale));
    var elementsTotal = elementsTall * elementsWide;
    if (searchUpdated || rowsScrolled != previousRowsScrolled) {
        searchOverlay.innerHTML = "";
        searchResults.slice(rowsScrolled*elementsWide, elementsTotal + (rowsScrolled+1)*elementsWide).forEach(item=>{
            var itemContainer = document.createElement("node");
            itemContainer.classList.add("itemNode");
            itemContainer.addEventListener("mousedown", ()=>resolveSearchItem(itemContainer));
            itemContainer.setAttribute("item", item);
            itemContainer.appendChild(new Item(item, null, null, null, null, true).element);
            searchOverlay.appendChild(itemContainer);
        });
    }
    previousRowsScrolled = rowsScrolled;
}

function displaySearchedRecipes(searchUpdated) {
    var scale = Number(wrapper.style.getPropertyValue("--scale")||1);
    searchOverlay.style.setProperty("--scale", scale);
    var elementsWide = Math.floor((searchOverlay.offsetWidth - 16) / (300*scale+16));
    var elementsTall = Math.ceil((searchOverlay.offsetHeight - 16) / (160*scale+16));
    var rowsScrolled = previousRowsScrolled;
    if (previousElementsWide && elementsWide != previousElementsWide) {
        rowsScrolled = Math.floor(rowsScrolled * previousElementsWide / elementsWide);
        var addUpScroll = false;
    }
    if (searchOverlay.childElementCount) {
        var bottomOfFirstRow = Array.from(searchOverlay.children).slice(0,elementsWide).map(element=>element.offsetTop+element.offsetHeight).reduce((total, bottom)=>Math.max(total,bottom));
        if (bottomOfFirstRow < 0) {
            searchScroll = previousScrollDeltaY - bottomOfFirstRow;
            rowsScrolled++;
        }
        if (searchScroll < 0) {
            addUpScroll = true;
            rowsScrolled--;
        }
    }
    var elementsTotal = elementsTall * elementsWide;
    if (searchUpdated || rowsScrolled != previousRowsScrolled) {
        searchOverlay.innerHTML = "";
        searchResults.slice(rowsScrolled*elementsWide, elementsTotal + (rowsScrolled+1)*elementsWide).forEach(recipe=>{
            var node = document.createElement("node");
            node.classList.add("recipeNode");
            node.addEventListener("mousedown", ()=>resolveSearchRecipe(node));
            node.setAttribute("recipe", recipe);
            nodeDisplayBaseCase(recipeNode(node, recipe, true));
            searchOverlay.appendChild(node);
        });
    }
    if (addUpScroll) {
        var rowsAccountedFor = 0;
        var amountToAdd = 0;
        do {
            amountToAdd += Array.from(searchOverlay.children).slice(elementsWide*rowsAccountedFor,elementsWide*(rowsAccountedFor+1)).map(element=>element.offsetHeight+8).reduce((total, height)=>Math.max(total,height)) + 56*scale;
            rowsAccountedFor++;
        } while (amountToAdd < -previousScrollDeltaY);
        searchScroll += amountToAdd;
    }
    searchOverlay.style.setProperty("--scroll-offset", searchScroll);
    previousElementsWide = elementsWide;
    previousRowsScrolled = rowsScrolled;
}

function resolveSearchItem(element) {
    var item = element.getAttribute("item");
    var graphScale = Number(wrapper.style.getPropertyValue('--scale')||1)
    var dragNode = newNode(itemNode, 
        (element.offsetLeft - Number(wrapper.style.getPropertyValue('--posX')||0)) / graphScale,
        (element.offsetTop - Number(wrapper.style.getPropertyValue('--posY')||0)) / graphScale,
    item)[1];
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    wrapper.addEventListener("mousemove", dragNode);
}

function resolveSearchRecipe(element) {
    var recipe = element.getAttribute("recipe");
    var graphScale = Number(wrapper.style.getPropertyValue('--scale')||1)
    var dragNode = newNode(recipeNode, 
        (element.offsetLeft - Number(wrapper.style.getPropertyValue('--posX')||0)) / graphScale,
        (element.offsetTop - Number(wrapper.style.getPropertyValue('--posY')||0)) / graphScale,
    recipe)[1];
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    wrapper.addEventListener("mousemove", dragNode);
}